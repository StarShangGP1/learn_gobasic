package main

func main() {}

// 大作业:聊天室
// 研发一个聊天室，让所有的在线用户可以互相聊天。
// 功能需求:
// • 需要注册才能加入聊天室。没有注册的话，无法正式使用聊天功能。
// • 登录后，可获取所有注册账号名单。
// • 选择一个注册账号，即可正式开始聊天
// • 聊天时，双方进行实时通信

// 功能清单
// • 注册:注册账号。注册时，带上“昵称”、密码。注册成功后，得到 账号。账号为纯数字，长度不超过11位。
// • 登录:使用账号、密码登录。账号、密码匹配成功，则可以开始聊天;不匹配则登录失败。登录成功后，可以开始聊天。
// • 获取在线用户:可以直接获取所有在线用户，分批完成，每批20个。获取清单内容包含:账号、昵称。
// • 开启聊天室:选择一个目标账号，可以开始聊天。聊天为实时通信，互相发送消息实时接收、发 送。
// • 聊天室:开始聊天时，如果曾经和这个账号聊天过，那么显示和这个账号最近20条对话记录。

// 要求
// • 交互:使用 CS 模式进行交互。需要使用专门开发的客户端才可以和服务端进行通信。要求使用 grpc 完成交互的功能
// • 在线用户:每次查 20 条;可以通过翻页查看更多用户。
// • 聊天记录:每收到一条消息，都保存到数据库中;每个小时自动将聊天记录备份到文件中。
// • 数据库:需要账号管理表(包含:seq、账号、密码、昵称);聊天记录表(包含:seq、说话 人、听讲人、聊天时间、聊天内容)。
// • 登录管理:本地保存登录用户名、密码文件到特定位置;每次开始聊天时，都去读取这个文件， 从而避免每次打开客户端时都要登录的问题。

// 命令行示例
// • 注册:
//  chat register --nickname=小强 --password=xiaoqiang
//  返回示例: {account: 747366 }
// • 登录:
//  chat login --account=747366 --password=xiaoqiang
//  登录示例: 登录成功，欢迎你回来，小强!
// • 查询在线用户: chat list --page=21
// • 聊天:
//  chat with --account=38474
//  聊天内容示例:
//  Jesse: 晚上要不要一起去研究多线程编程?
//  小强:好的，我也正想找你一起研究研究呢。
//  ......
// • 登录:
//  chat history --with=38474
//  Jesse: 晚上要不要一起去研究多线程编程?
//  小强:好的，我也正想找你一起研究研究呢。
//  ......
// • 聊天:
//  chat subscribe
//  如果有人找“我”聊天，会发出发信人的 账号、昵称、发信内容

// 提示
// • 每次 chat 这个命令行运行时，它都需要与服务端进行一次登录验证。
// • 每个电脑都可以开启多个 chat 命令行，有的在 watch，有的在和其他人在聊天。消息都要实时 收到。
// • 在开始聊天时，是在命令行中实时交互，直到退出聊天。
// • 可以设置专门的结束聊天命令，如:exit 0。从而可以结束聊天，退出程序。
// • 不考虑程序被 Ctrl + C 终止的情况。
// • 不考虑数据量的问题。
